From ed639ba26a379d0a3628aaca597a76ced1d92a6c Mon Sep 17 00:00:00 2001
From: "Shricharan K.S" <62522322+shricharanks108@users.noreply.github.com>
Date: Mon, 25 Dec 2023 12:31:02 -0500
Subject: [PATCH] Finish Task 2

---
 src/App.tsx   | 31 +++++++++++++++++++++++++------
 src/Graph.tsx | 17 ++++++++++++++---
 2 files changed, 39 insertions(+), 9 deletions(-)

diff --git a/src/App.tsx b/src/App.tsx
index 0728518..2673bbf 100755
--- a/src/App.tsx
+++ b/src/App.tsx
@@ -8,6 +8,7 @@ import './App.css';
  */
 interface IState {
   data: ServerRespond[],
+  showGraph: boolean,
 }
 
 /**
@@ -22,6 +23,8 @@ class App extends Component<{}, IState> {
       // data saves the server responds.
       // We use this state to parse data down to the child element (Graph) as element property
       data: [],
+      // showGraph is a boolean toggle to show whether the graph should be rendered or not
+      showGraph: false,
     };
   }
 
@@ -29,18 +32,34 @@ class App extends Component<{}, IState> {
    * Render Graph react component with state.data parse as property data
    */
   renderGraph() {
-    return (<Graph data={this.state.data}/>)
+    if (this.state.showGraph) {
+      return (<Graph data={this.state.data}/>)
+    }
   }
 
   /**
    * Get new data from server and update the state with the new data
    */
   getDataFromServer() {
-    DataStreamer.getData((serverResponds: ServerRespond[]) => {
-      // Update the state by creating a new array of data that consists of
-      // Previous data in the state and the new data from server
-      this.setState({ data: [...this.state.data, ...serverResponds] });
-    });
+    let x = 0;
+    const interval = setInterval(() => {
+      DataStreamer.getData((serverResponds: ServerRespond[]) => {
+        this.setState({
+          data: serverResponds,
+          showGraph: true,
+        });
+      });
+      x++;
+      if (x > 1000) {
+        clearInterval(interval);
+      }
+    }
+    , 100);
+    // DataStreamer.getData((serverResponds: ServerRespond[]) => {
+    //   // Update the state by creating a new array of data that consists of
+    //   // Previous data in the state and the new data from server
+    //   this.setState({ data: [...this.state.data, ...serverResponds] });
+    // });
   }
 
   /**
diff --git a/src/Graph.tsx b/src/Graph.tsx
index 3b2a7da..14bc58a 100644
--- a/src/Graph.tsx
+++ b/src/Graph.tsx
@@ -14,7 +14,7 @@ interface IProps {
  * Perspective library adds load to HTMLElement prototype.
  * This interface acts as a wrapper for Typescript compiler.
  */
-interface PerspectiveViewerElement {
+interface PerspectiveViewerElement extends HTMLElement {
   load: (table: Table) => void,
 }
 
@@ -31,8 +31,19 @@ class Graph extends Component<IProps, {}> {
   }
 
   componentDidMount() {
-    // Get element to attach the table from the DOM.
-    const elem: PerspectiveViewerElement = document.getElementsByTagName('perspective-viewer')[0] as unknown as PerspectiveViewerElement;
+    // Get element to attach the graph from the DOM.
+    const elem = document.getElementsByTagName('perspective-viewer')[0] as unknown as PerspectiveViewerElement;
+
+    // set necessary attributes for the table to function as expected
+    elem.setAttribute('view', 'y_line');
+    elem.setAttribute('column-pivots', '["stock"]');
+    elem.setAttribute('row-pivots', '["timestamp"]');
+    elem.setAttribute('columns', '["top_ask_price"]');
+    elem.setAttribute('aggregates', `
+    {"stock": "distinct count",
+    "top_ask_price": "avg",
+    "top_bid_price": "avg",
+    "timestamp": "distinct count"}`);
 
     const schema = {
       stock: 'string',
-- 
2.33.0.windows.2

